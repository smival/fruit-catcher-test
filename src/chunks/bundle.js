System.register([], function(_export, _context) { return { execute: function () {
    System.register("chunks:///_virtual/cjs-loader.mjs", [], function (exports) {
      return {
        execute: function () {
          var CjsLoader = /*#__PURE__*/function () {
            function CjsLoader() {
              this._registry = {};
              this._moduleCache = {};
            }

            /**
             * Defines a CommonJS module.
             * @param id Module ID.
             * @param factory The factory.
             * @param resolveMap An object or a function returning object which records the module specifier resolve result.
             * The later is called as "deferred resolve map" and would be invocated right before CommonJS code execution.
             */
            var _proto = CjsLoader.prototype;
            _proto.define = function define(id, factory, resolveMap) {
              this._registry[id] = {
                factory: factory,
                resolveMap: resolveMap
              };
            }

            /**
             * Requires a CommonJS module.
             * @param id Module ID.
             * @returns The module's `module.exports`.
             */;
            _proto.require = function require(id) {
              return this._require(id);
            };
            _proto.throwInvalidWrapper = function throwInvalidWrapper(requestTarget, from) {
              throw new Error("Module '" + requestTarget + "' imported from '" + from + "' is expected be an ESM-wrapped CommonJS module but it doesn't.");
            };
            _proto._require = function _require(id, parent) {
              var cachedModule = this._moduleCache[id];
              if (cachedModule) {
                return cachedModule.exports;
              }
              var module = {
                id: id,
                exports: {}
              };
              this._moduleCache[id] = module;
              this._tryModuleLoad(module, id);
              return module.exports;
            };
            _proto._resolve = function _resolve(specifier, parent) {
              return this._resolveFromInfos(specifier, parent) || this._throwUnresolved(specifier, parent);
            };
            _proto._resolveFromInfos = function _resolveFromInfos(specifier, parent) {
              var _cjsInfos$parent$reso, _cjsInfos$parent;
              if (specifier in cjsInfos) {
                return specifier;
              }
              if (!parent) {
                return;
              }
              return (_cjsInfos$parent$reso = (_cjsInfos$parent = cjsInfos[parent]) == null ? void 0 : _cjsInfos$parent.resolveCache[specifier]) != null ? _cjsInfos$parent$reso : undefined;
            };
            _proto._tryModuleLoad = function _tryModuleLoad(module, id) {
              var threw = true;
              try {
                this._load(module, id);
                threw = false;
              } finally {
                if (threw) {
                  delete this._moduleCache[id];
                }
              }
            };
            _proto._load = function _load(module, id) {
              var _this$_loadWrapper = this._loadWrapper(id),
                  factory = _this$_loadWrapper.factory,
                  resolveMap = _this$_loadWrapper.resolveMap;
              var vendorRequire = this._createRequire(module);
              var require = resolveMap ? this._createRequireWithResolveMap(typeof resolveMap === 'function' ? resolveMap() : resolveMap, vendorRequire) : vendorRequire;
              factory(module.exports, require, module);
            };
            _proto._loadWrapper = function _loadWrapper(id) {
              if (id in this._registry) {
                return this._registry[id];
              } else {
                return this._loadHostProvidedModules(id);
              }
            };
            _proto._loadHostProvidedModules = function _loadHostProvidedModules(id) {
              return {
                factory: function factory(_exports, _require, module) {
                  if (typeof require === 'undefined') {
                    throw new Error("Current environment does not provide a require() for requiring '" + id + "'.");
                  }
                  try {
                    module.exports = require(id);
                  } catch (err) {
                    throw new Error("Exception thrown when calling host defined require('" + id + "').", {
                      cause: err
                    });
                  }
                }
              };
            };
            _proto._createRequire = function _createRequire(module) {
              var _this = this;
              return function (specifier) {
                return _this._require(specifier, module);
              };
            };
            _proto._createRequireWithResolveMap = function _createRequireWithResolveMap(requireMap, originalRequire) {
              return function (specifier) {
                var resolved = requireMap[specifier];
                if (resolved) {
                  return originalRequire(resolved);
                } else {
                  throw new Error('Unresolved specifier ' + specifier);
                }
              };
            };
            _proto._throwUnresolved = function _throwUnresolved(specifier, parentUrl) {
              throw new Error("Unable to resolve " + specifier + " from " + parent + ".");
            };
            return CjsLoader;
          }();
          var loader = exports('default', new CjsLoader());
        }
      };
    });

    System.register("chunks:///_virtual/Engine.js", ['./cjs-loader.mjs'], function (exports, module) {
      var loader;
      return {
        setters: [function (module) {
          loader = module.default;
        }],
        execute: function () {
          var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
          loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            var Engine = function () {
              function Engine() {
                this._entities = [];
                this._entityListeners = [];
                this._systems = [];
                this._systemsNeedSorting = false;
              }

              Object.defineProperty(Engine.prototype, "entities", {
                get: function get() {
                  return Object.freeze(this._entities.slice(0));
                },
                enumerable: true,
                configurable: true
              });
              Engine.prototype.notifyPriorityChange = function (system) {
                this._systemsNeedSorting = true;
              };
              Engine.prototype.addEntityListener = function (listener) {
                if (this._entityListeners.indexOf(listener) === -1) {
                  this._entityListeners.push(listener);
                }
                return this;
              };
              Engine.prototype.removeEntityListener = function (listener) {
                var index = this._entityListeners.indexOf(listener);
                if (index !== -1) {
                  this._entityListeners.splice(index, 1);
                }
                return this;
              };
              Engine.prototype.addEntity = function (entity) {
                if (this._entities.indexOf(entity) === -1) {
                  this._entities.push(entity);
                  for (var _i = 0, _a = this._entityListeners; _i < _a.length; _i++) {
                    var listener = _a[_i];
                    listener.onEntityAdded(entity);
                  }
                }
                return this;
              };
              Engine.prototype.addEntities = function () {
                var entities = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  entities[_i] = arguments[_i];
                }
                for (var _a = 0, entities_1 = entities; _a < entities_1.length; _a++) {
                  var entity = entities_1[_a];
                  this.addEntity(entity);
                }
                return this;
              };
              Engine.prototype.removeEntity = function (entity) {
                var index = this._entities.indexOf(entity);
                if (index !== -1) {
                  this._entities.splice(index, 1);
                  for (var _i = 0, _a = this._entityListeners; _i < _a.length; _i++) {
                    var listener = _a[_i];
                    listener.onEntityRemoved(entity);
                  }
                }
              };
              Engine.prototype.removeEntities = function () {
                var entities = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  entities[_i] = arguments[_i];
                }
                for (var _a = 0, entities_2 = entities; _a < entities_2.length; _a++) {
                  var entity = entities_2[_a];
                  this.removeEntity(entity);
                }
                return this;
              };
              Engine.prototype.addSystem = function (system) {
                var index = this._systems.indexOf(system);
                if (index === -1) {
                  this._systems.push(system);
                  system.onAttach(this);
                  this._systemsNeedSorting = true;
                }
                return this;
              };
              Engine.prototype.addSystems = function () {
                var systems = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  systems[_i] = arguments[_i];
                }
                for (var _a = 0, systems_1 = systems; _a < systems_1.length; _a++) {
                  var system = systems_1[_a];
                  this.addSystem(system);
                }
              };
              Engine.prototype.removeSystem = function (system) {
                var index = this._systems.indexOf(system);
                if (index !== -1) {
                  this._systems.splice(index, 1);
                  system.onDetach(this);
                }
                return this;
              };
              Engine.prototype.removeSystems = function () {
                var systems = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  systems[_i] = arguments[_i];
                }
                for (var _a = 0, systems_2 = systems; _a < systems_2.length; _a++) {
                  var system = systems_2[_a];
                  this.removeSystem(system);
                }
              };
              Engine.prototype.update = function (delta) {
                if (this._systemsNeedSorting) {
                  this._systemsNeedSorting = false;
                  this._systems.sort(function (a, b) {
                    return a.priority - b.priority;
                  });
                }
                for (var _i = 0, _a = this._systems; _i < _a.length; _i++) {
                  var system = _a[_i];
                  system.update(this, delta);
                }
              };
              return Engine;
            }();
            exports.Engine = Engine;

            // #endregion ORIGINAL CODE

            module.exports;
            module.exports.__esModule;
            module.exports.Engine;
          }, {});
        }
      };
    });

    System.register("chunks:///_virtual/Entity.js", ['./cjs-loader.mjs'], function (exports, module) {
      var loader;
      return {
        setters: [function (module) {
          loader = module.default;
        }],
        execute: function () {
          var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
          loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            var Entity = function () {
              function Entity() {
                this._id = null;
                this._components = {};
                this._listeners = [];
                this._componentClasses = {};
              }

              Object.defineProperty(Entity.prototype, "id", {
                get: function get() {
                  if (this._id === null) {
                    throw new Error("Cannot retrieve an ID when is null.");
                  }
                  return this._id;
                },
                set: function set(value) {
                  if (value === null || value === undefined) {
                    throw new Error("Must set a non null value when setting an entity id.");
                  }
                  if (this._id !== null) {
                    throw new Error("Entity id is already set as \"" + this._id + "\".");
                  }
                  this._id = value;
                },
                enumerable: true,
                configurable: true
              });
              Entity.prototype.isNew = function () {
                return this._id === null;
              };
              Entity.prototype.listComponents = function () {
                var _this = this;
                return Object.keys(this._components).map(function (i) {
                  return _this._components[i];
                });
              };
              Entity.prototype.listComponentsWithTypes = function () {
                var _this = this;
                return Object.keys(this._components).map(function (i) {
                  return {
                    component: _this._components[i],
                    type: _this._componentClasses[i]
                  };
                });
              };
              Entity.prototype.listComponentsWithTags = function () {
                var _this = this;
                return Object.keys(this._components).map(function (tag) {
                  return Object.freeze({
                    tag: tag,
                    component: _this._components[tag]
                  });
                });
              };
              Entity.prototype.hasComponent = function (componentClass) {
                var tag = componentClass.tag || componentClass.name;
                var component = this._components[tag];
                if (!component) return false;
                if (!this.cast(component, componentClass)) {
                  throw new Error("There are multiple classes with the same tag or name \"" + tag + "\".\nAdd a different property \"tag\" to one of them.");
                }
                return true;
              };
              Entity.prototype.getComponent = function (componentClass) {
                var tag = componentClass.tag || componentClass.name;
                var component = this._components[tag];
                if (!component) {
                  throw new Error("Cannot get component \"" + tag + "\" from entity.");
                }
                if (!this.cast(component, componentClass)) {
                  throw new Error("There are multiple classes with the same tag or name \"" + tag + "\".\nAdd a different property \"tag\" to one of them.");
                }
                return component;
              };
              Entity.prototype.putComponent = function (componentClass) {
                var tag = componentClass.tag || componentClass.name;
                var component = this._components[tag];
                if (component) {
                  if (!this.cast(component, componentClass)) {
                    throw new Error("There are multiple classes with the same tag or name \"" + tag + "\".\nAdd a different property \"tag\" to one of them.");
                  }
                  delete this._components[tag];
                  delete this._componentClasses[tag];
                }
                var newComponent = new componentClass();
                this._components[tag] = newComponent;
                this._componentClasses[tag] = componentClass;
                for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {
                  var listener = _a[_i];
                  listener(this);
                }
                return newComponent;
              };
              Entity.prototype.removeComponent = function (componentClass) {
                var tag = componentClass.tag || componentClass.name;
                var component = this._components[tag];
                if (!component) {
                  throw new Error("Component of tag \"" + tag + "\".\nDoes not exists.");
                }
                if (!this.cast(component, componentClass)) {
                  throw new Error("There are multiple classes with the same tag or name \"" + tag + "\".\nAdd a different property \"tag\" to one of them.");
                }
                delete this._components[tag];
                for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {
                  var listener = _a[_i];
                  listener(this);
                }
              };
              Entity.prototype.cast = function (component, componentClass) {
                return !!(component && component instanceof componentClass);
              };
              Entity.prototype.addListener = function (listener) {
                var index = this._listeners.indexOf(listener);
                if (index === -1) {
                  this._listeners.push(listener);
                }
                return this;
              };
              Entity.prototype.removeListener = function (listener) {
                var index = this._listeners.indexOf(listener);
                if (index !== -1) {
                  this._listeners.splice(index, 1);
                }
                return this;
              };
              return Entity;
            }();
            exports.Entity = Entity;

            // #endregion ORIGINAL CODE

            module.exports;
            module.exports.__esModule;
            module.exports.Entity;
          }, {});
        }
      };
    });

    System.register("chunks:///_virtual/Family.js", ['./cjs-loader.mjs'], function (exports, module) {
      var loader;
      return {
        setters: [function (module) {
          loader = module.default;
        }],
        execute: function () {
          var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
          loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
            var __extends = this && this.__extends || function () {
              var extendStatics = Object.setPrototypeOf || {
                __proto__: []
              } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function (d, b) {
                extendStatics(d, b);

                function __() {
                  this.constructor = d;
                }

                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            var AbstractFamily = function () {
              function AbstractFamily(engine, include, exclude) {
                var _this = this;
                this.includesEntity = function (entity) {
                  for (var _i = 0, _a = _this._include; _i < _a.length; _i++) {
                    var include = _a[_i];
                    if (!entity.hasComponent(include)) {
                      return false;
                    }
                  }
                  for (var _b = 0, _c = _this._exclude; _b < _c.length; _b++) {
                    var exclude = _c[_b];
                    if (entity.hasComponent(exclude)) {
                      return false;
                    }
                  }
                  return true;
                };
                this._engine = engine;
                this._include = Object.freeze(include.slice(0));
                this._exclude = Object.freeze(exclude.slice(0));
              }

              Object.defineProperty(AbstractFamily.prototype, "engine", {
                get: function get() {
                  return this._engine;
                },
                enumerable: true,
                configurable: true
              });
              return AbstractFamily;
            }();
            var CachedFamily = function (_super) {
              __extends(CachedFamily, _super);

              function CachedFamily(engine, include, exclude) {
                var _this = _super.call(this, engine, include, exclude) || this;
                _this.onEntityChanged = function (entity) {
                  var index = _this._entities.indexOf(entity);
                  if (index === -1) {
                    _this._entities.push(entity);
                    entity.addListener(_this.onEntityChanged);
                  }
                  _this._needEntityRefresh = true;
                };
                var allEntities = _this.engine.entities;
                _this._entities = allEntities.filter(_this.includesEntity);
                _this.engine.addEntityListener(_this);
                for (var _i = 0, allEntities_1 = allEntities; _i < allEntities_1.length; _i++) {
                  var entity = allEntities_1[_i];
                  entity.addListener(_this.onEntityAdded);
                }
                _this._needEntityRefresh = false;
                return _this;
              }

              Object.defineProperty(CachedFamily.prototype, "entities", {
                get: function get() {
                  if (this._needEntityRefresh) {
                    this._needEntityRefresh = false;
                    this._entities = this._entities.filter(this.includesEntity);
                  }
                  return Object.freeze(this._entities.slice(0));
                },
                enumerable: true,
                configurable: true
              });
              CachedFamily.prototype.onEntityAdded = function (entity) {
                var index = this._entities.indexOf(entity);
                if (index === -1) {
                  this._entities.push(entity);
                  this._needEntityRefresh = true;
                  entity.addListener(this.onEntityChanged);
                }
              };
              CachedFamily.prototype.onEntityRemoved = function (entity) {
                var index = this._entities.indexOf(entity);
                if (index !== -1) {
                  var entity_1 = this._entities[index];
                  this._entities.splice(index, 1);
                  entity_1.removeListener(this.onEntityChanged);
                }
              };
              return CachedFamily;
            }(AbstractFamily);
            var NonCachedFamily = function (_super) {
              __extends(NonCachedFamily, _super);

              function NonCachedFamily() {
                return _super !== null && _super.apply(this, arguments) || this;
              }

              Object.defineProperty(NonCachedFamily.prototype, "entities", {
                get: function get() {
                  return this.engine.entities.filter(this.includesEntity);
                },
                enumerable: true,
                configurable: true
              });
              return NonCachedFamily;
            }(AbstractFamily);
            var FamilyBuilder = function () {
              function FamilyBuilder(engine) {
                this._engine = engine || null;
                this._include = [];
                this._exclude = [];
                this._cached = true;
              }

              FamilyBuilder.prototype.include = function () {
                var classes = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  classes[_i] = arguments[_i];
                }
                (_a = this._include).push.apply(_a, classes);
                return this;
                var _a;
              };
              FamilyBuilder.prototype.exclude = function () {
                var classes = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  classes[_i] = arguments[_i];
                }
                (_a = this._exclude).push.apply(_a, classes);
                return this;
                var _a;
              };
              FamilyBuilder.prototype.changeEngine = function (engine) {
                this._engine = engine;
                return this;
              };
              FamilyBuilder.prototype.setCached = function (cached) {
                this._cached = cached;
              };
              FamilyBuilder.prototype.build = function () {
                if (!this._engine) {
                  throw new Error("Family should always belong to an engine.");
                }
                if (!this._cached) {
                  return new NonCachedFamily(this._engine, this._include, this._exclude);
                }
                return new CachedFamily(this._engine, this._include, this._exclude);
              };
              return FamilyBuilder;
            }();
            exports.FamilyBuilder = FamilyBuilder;

            // #endregion ORIGINAL CODE

            module.exports;
            module.exports.__esModule;
            module.exports.FamilyBuilder;
          }, {});
        }
      };
    });

    System.register("chunks:///_virtual/index.js", ['./cjs-loader.mjs', './index2.js'], function (exports, module) {
      var loader, __cjsMetaURL$1;
      return {
        setters: [function (module) {
          loader = module.default;
        }, function (module) {
          __cjsMetaURL$1 = module.__cjsMetaURL;
        }],
        execute: function () {
          exports('default', void 0);
          var _cjsExports;
          var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
          loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
            // #region ORIGINAL CODE

            module.exports = require("./lib/index");

            // #endregion ORIGINAL CODE

            _cjsExports = exports('default', module.exports);
          }, function () {
            return {
              './lib/index': __cjsMetaURL$1
            };
          });
        }
      };
    });

    System.register("chunks:///_virtual/index.mjs_cjs=&original=.js", ['./index.js', './cjs-loader.mjs'], function (exports, module) {
      var __cjsMetaURL, loader;
      return {
        setters: [function (module) {
          __cjsMetaURL = module.__cjsMetaURL;
          var _setter = {};
          _setter.__cjsMetaURL = module.__cjsMetaURL;
          _setter.default = module.default;
          exports(_setter);
        }, function (module) {
          loader = module.default;
        }],
        execute: function () {
          // I am the facade module who provides access to the CommonJS module './index.js'~
          if (!__cjsMetaURL) {
            loader.throwInvalidWrapper('./index.js', module.meta.url);
          }
          loader.require(__cjsMetaURL);
        }
      };
    });

    System.register("chunks:///_virtual/index2.js", ['./cjs-loader.mjs', './Engine.js', './Entity.js', './Family.js', './System.js'], function (exports, module) {
      var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;
      return {
        setters: [function (module) {
          loader = module.default;
        }, function (module) {
          __cjsMetaURL$1 = module.__cjsMetaURL;
        }, function (module) {
          __cjsMetaURL$2 = module.__cjsMetaURL;
        }, function (module) {
          __cjsMetaURL$3 = module.__cjsMetaURL;
        }, function (module) {
          __cjsMetaURL$4 = module.__cjsMetaURL;
        }],
        execute: function () {
          var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
          loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
            function __export(m) {
              for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }

            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            __export(require("./Engine"));
            __export(require("./Entity"));
            __export(require("./Family"));
            __export(require("./System"));

            // #endregion ORIGINAL CODE

            module.exports;
            module.exports.__esModule;
          }, function () {
            return {
              './Engine': __cjsMetaURL$1,
              './Entity': __cjsMetaURL$2,
              './Family': __cjsMetaURL$3,
              './System': __cjsMetaURL$4
            };
          });
        }
      };
    });

    System.register("chunks:///_virtual/rollupPluginModLoBabelHelpers.js", [], function (exports) {
      return {
        execute: function () {
          exports({
            applyDecoratedDescriptor: _applyDecoratedDescriptor,
            arrayLikeToArray: _arrayLikeToArray,
            assertThisInitialized: _assertThisInitialized,
            asyncToGenerator: _asyncToGenerator,
            construct: _construct,
            createClass: _createClass,
            createForOfIteratorHelperLoose: _createForOfIteratorHelperLoose,
            getPrototypeOf: _getPrototypeOf,
            inheritsLoose: _inheritsLoose,
            initializerDefineProperty: _initializerDefineProperty,
            isNativeFunction: _isNativeFunction,
            isNativeReflectConstruct: _isNativeReflectConstruct,
            regeneratorRuntime: _regeneratorRuntime,
            setPrototypeOf: _setPrototypeOf,
            toPrimitive: _toPrimitive,
            toPropertyKey: _toPropertyKey,
            unsupportedIterableToArray: _unsupportedIterableToArray,
            wrapNativeSuper: _wrapNativeSuper
          });

          function _regeneratorRuntime() {
            /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
            _regeneratorRuntime = exports('regeneratorRuntime', function () {
              return e;
            });
            var t,
                e = {},
                r = Object.prototype,
                n = r.hasOwnProperty,
                o = Object.defineProperty || function (t, e, r) {
                  t[e] = r.value;
                },
                i = "function" == typeof Symbol ? Symbol : {},
                a = i.iterator || "@@iterator",
                c = i.asyncIterator || "@@asyncIterator",
                u = i.toStringTag || "@@toStringTag";

            function define(t, e, r) {
              return Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
              }), t[e];
            }

            try {
              define({}, "");
            } catch (t) {
              define = function (t, e, r) {
                return t[e] = r;
              };
            }

            function wrap(t, e, r, n) {
              var i = e && e.prototype instanceof Generator ? e : Generator,
                  a = Object.create(i.prototype),
                  c = new Context(n || []);
              return o(a, "_invoke", {
                value: makeInvokeMethod(t, r, c)
              }), a;
            }

            function tryCatch(t, e, r) {
              try {
                return {
                  type: "normal",
                  arg: t.call(e, r)
                };
              } catch (t) {
                return {
                  type: "throw",
                  arg: t
                };
              }
            }

            e.wrap = wrap;
            var h = "suspendedStart",
                l = "suspendedYield",
                f = "executing",
                s = "completed",
                y = {};

            function Generator() {
            }

            function GeneratorFunction() {
            }

            function GeneratorFunctionPrototype() {
            }

            var p = {};
            define(p, a, function () {
              return this;
            });
            var d = Object.getPrototypeOf,
                v = d && d(d(values([])));
            v && v !== r && n.call(v, a) && (p = v);
            var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);

            function defineIteratorMethods(t) {
              ["next", "throw", "return"].forEach(function (e) {
                define(t, e, function (t) {
                  return this._invoke(e, t);
                });
              });
            }

            function AsyncIterator(t, e) {
              function invoke(r, o, i, a) {
                var c = tryCatch(t[r], t, o);
                if ("throw" !== c.type) {
                  var u = c.arg,
                      h = u.value;
                  return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
                    invoke("next", t, i, a);
                  }, function (t) {
                    invoke("throw", t, i, a);
                  }) : e.resolve(h).then(function (t) {
                    u.value = t, i(u);
                  }, function (t) {
                    return invoke("throw", t, i, a);
                  });
                }
                a(c.arg);
              }

              var r;
              o(this, "_invoke", {
                value: function (t, n) {
                  function callInvokeWithMethodAndArg() {
                    return new e(function (e, r) {
                      invoke(t, n, e, r);
                    });
                  }

                  return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                }
              });
            }

            function makeInvokeMethod(e, r, n) {
              var o = h;
              return function (i, a) {
                if (o === f) throw new Error("Generator is already running");
                if (o === s) {
                  if ("throw" === i) throw a;
                  return {
                    value: t,
                    done: !0
                  };
                }
                for (n.method = i, n.arg = a; ;) {
                  var c = n.delegate;
                  if (c) {
                    var u = maybeInvokeDelegate(c, n);
                    if (u) {
                      if (u === y) continue;
                      return u;
                    }
                  }
                  if ("next" === n.method) n.sent = n._sent = n.arg; else if ("throw" === n.method) {
                    if (o === h) throw o = s, n.arg;
                    n.dispatchException(n.arg);
                  } else "return" === n.method && n.abrupt("return", n.arg);
                  o = f;
                  var p = tryCatch(e, r, n);
                  if ("normal" === p.type) {
                    if (o = n.done ? s : l, p.arg === y) continue;
                    return {
                      value: p.arg,
                      done: n.done
                    };
                  }
                  "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
                }
              };
            }

            function maybeInvokeDelegate(e, r) {
              var n = r.method,
                  o = e.iterator[n];
              if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
              var i = tryCatch(o, e.iterator, r.arg);
              if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
              var a = i.arg;
              return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
            }

            function pushTryEntry(t) {
              var e = {
                tryLoc: t[0]
              };
              1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
            }

            function resetTryEntry(t) {
              var e = t.completion || {};
              e.type = "normal", delete e.arg, t.completion = e;
            }

            function Context(t) {
              this.tryEntries = [{
                tryLoc: "root"
              }], t.forEach(pushTryEntry, this), this.reset(!0);
            }

            function values(e) {
              if (e || "" === e) {
                var r = e[a];
                if (r) return r.call(e);
                if ("function" == typeof e.next) return e;
                if (!isNaN(e.length)) {
                  var o = -1,
                      i = function next() {
                        for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
                        return next.value = t, next.done = !0, next;
                      };
                  return i.next = i;
                }
              }
              throw new TypeError(typeof e + " is not iterable");
            }

            return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
              value: GeneratorFunctionPrototype,
              configurable: !0
            }), o(GeneratorFunctionPrototype, "constructor", {
              value: GeneratorFunction,
              configurable: !0
            }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
              var e = "function" == typeof t && t.constructor;
              return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
            }, e.mark = function (t) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
            }, e.awrap = function (t) {
              return {
                __await: t
              };
            }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
              return this;
            }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
              void 0 === i && (i = Promise);
              var a = new AsyncIterator(wrap(t, r, n, o), i);
              return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
                return t.done ? t.value : a.next();
              });
            }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
              return this;
            }), define(g, "toString", function () {
              return "[object Generator]";
            }), e.keys = function (t) {
              var e = Object(t),
                  r = [];
              for (var n in e) r.push(n);
              return r.reverse(), function next() {
                for (; r.length;) {
                  var t = r.pop();
                  if (t in e) return next.value = t, next.done = !1, next;
                }
                return next.done = !0, next;
              };
            }, e.values = values, Context.prototype = {
              constructor: Context,
              reset: function (e) {
                if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
              },
              stop: function () {
                this.done = !0;
                var t = this.tryEntries[0].completion;
                if ("throw" === t.type) throw t.arg;
                return this.rval;
              },
              dispatchException: function (e) {
                if (this.done) throw e;
                var r = this;

                function handle(n, o) {
                  return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
                }

                for (var o = this.tryEntries.length - 1; o >= 0; --o) {
                  var i = this.tryEntries[o],
                      a = i.completion;
                  if ("root" === i.tryLoc) return handle("end");
                  if (i.tryLoc <= this.prev) {
                    var c = n.call(i, "catchLoc"),
                        u = n.call(i, "finallyLoc");
                    if (c && u) {
                      if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                      if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                    } else if (c) {
                      if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                    } else {
                      if (!u) throw new Error("try statement without catch or finally");
                      if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                    }
                  }
                }
              },
              abrupt: function (t, e) {
                for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                  var o = this.tryEntries[r];
                  if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                    var i = o;
                    break;
                  }
                }
                i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
                var a = i ? i.completion : {};
                return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
              },
              complete: function (t, e) {
                if ("throw" === t.type) throw t.arg;
                return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
              },
              finish: function (t) {
                for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                  var r = this.tryEntries[e];
                  if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
                }
              },
              catch: function (t) {
                for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                  var r = this.tryEntries[e];
                  if (r.tryLoc === t) {
                    var n = r.completion;
                    if ("throw" === n.type) {
                      var o = n.arg;
                      resetTryEntry(r);
                    }
                    return o;
                  }
                }
                throw new Error("illegal catch attempt");
              },
              delegateYield: function (e, r, n) {
                return this.delegate = {
                  iterator: values(e),
                  resultName: r,
                  nextLoc: n
                }, "next" === this.method && (this.arg = t), y;
              }
            }, e;
          }

          function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
              var info = gen[key](arg);
              var value = info.value;
            } catch (error) {
              reject(error);
              return;
            }
            if (info.done) {
              resolve(value);
            } else {
              Promise.resolve(value).then(_next, _throw);
            }
          }

          function _asyncToGenerator(fn) {
            return function () {
              var self = this,
                  args = arguments;
              return new Promise(function (resolve, reject) {
                var gen = fn.apply(self, args);

                function _next(value) {
                  asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }

                function _throw(err) {
                  asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }

                _next(undefined);
              });
            };
          }

          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            Object.defineProperty(Constructor, "prototype", {
              writable: false
            });
            return Constructor;
          }

          function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            _setPrototypeOf(subClass, superClass);
          }

          function _getPrototypeOf(o) {
            _getPrototypeOf = exports('getPrototypeOf', Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            });
            return _getPrototypeOf(o);
          }

          function _setPrototypeOf(o, p) {
            _setPrototypeOf = exports('setPrototypeOf', Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            });
            return _setPrototypeOf(o, p);
          }

          function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;
            try {
              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
              }));
              return true;
            } catch (e) {
              return false;
            }
          }

          function _construct(Parent, args, Class) {
            if (_isNativeReflectConstruct()) {
              _construct = exports('construct', Reflect.construct.bind());
            } else {
              _construct = exports('construct', function _construct(Parent, args, Class) {
                var a = [null];
                a.push.apply(a, args);
                var Constructor = Function.bind.apply(Parent, a);
                var instance = new Constructor();
                if (Class) _setPrototypeOf(instance, Class.prototype);
                return instance;
              });
            }
            return _construct.apply(null, arguments);
          }

          function _isNativeFunction(fn) {
            return Function.toString.call(fn).indexOf("[native code]") !== -1;
          }

          function _wrapNativeSuper(Class) {
            var _cache = typeof Map === "function" ? new Map() : undefined;
            _wrapNativeSuper = exports('wrapNativeSuper', function _wrapNativeSuper(Class) {
              if (Class === null || !_isNativeFunction(Class)) return Class;
              if (typeof Class !== "function") {
                throw new TypeError("Super expression must either be null or a function");
              }
              if (typeof _cache !== "undefined") {
                if (_cache.has(Class)) return _cache.get(Class);
                _cache.set(Class, Wrapper);
              }

              function Wrapper() {
                return _construct(Class, arguments, _getPrototypeOf(this).constructor);
              }

              Wrapper.prototype = Object.create(Class.prototype, {
                constructor: {
                  value: Wrapper,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              return _setPrototypeOf(Wrapper, Class);
            });
            return _wrapNativeSuper(Class);
          }

          function _assertThisInitialized(self) {
            if (self === void 0) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self;
          }

          function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
          }

          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
            return arr2;
          }

          function _createForOfIteratorHelperLoose(o, allowArrayLike) {
            var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
            if (it) return (it = it.call(o)).next.bind(it);
            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
              if (it) o = it;
              var i = 0;
              return function () {
                if (i >= o.length) return {
                  done: true
                };
                return {
                  done: false,
                  value: o[i++]
                };
              };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }

          function _toPrimitive(input, hint) {
            if (typeof input !== "object" || input === null) return input;
            var prim = input[Symbol.toPrimitive];
            if (prim !== undefined) {
              var res = prim.call(input, hint || "default");
              if (typeof res !== "object") return res;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return (hint === "string" ? String : Number)(input);
          }

          function _toPropertyKey(arg) {
            var key = _toPrimitive(arg, "string");
            return typeof key === "symbol" ? key : String(key);
          }

          function _initializerDefineProperty(target, property, descriptor, context) {
            if (!descriptor) return;
            Object.defineProperty(target, property, {
              enumerable: descriptor.enumerable,
              configurable: descriptor.configurable,
              writable: descriptor.writable,
              value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
            });
          }

          function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
            var desc = {};
            Object.keys(descriptor).forEach(function (key) {
              desc[key] = descriptor[key];
            });
            desc.enumerable = !!desc.enumerable;
            desc.configurable = !!desc.configurable;
            if ('value' in desc || desc.initializer) {
              desc.writable = true;
            }
            desc = decorators.slice().reverse().reduce(function (desc, decorator) {
              return decorator(target, property, desc) || desc;
            }, desc);
            if (context && desc.initializer !== void 0) {
              desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
              desc.initializer = undefined;
            }
            if (desc.initializer === void 0) {
              Object.defineProperty(target, property, desc);
              desc = null;
            }
            return desc;
          }
        }
      };
    });

    System.register("chunks:///_virtual/System.js", ['./cjs-loader.mjs'], function (exports, module) {
      var loader;
      return {
        setters: [function (module) {
          loader = module.default;
        }],
        execute: function () {
          var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
          loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            var System = function () {
              function System() {
                this._priority = 0;
                this._engines = [];
              }

              Object.defineProperty(System.prototype, "priority", {
                get: function get() {
                  return this._priority;
                },
                set: function set(value) {
                  this._priority = value;
                  for (var _i = 0, _a = this._engines; _i < _a.length; _i++) {
                    var engine = _a[_i];
                    engine.notifyPriorityChange(this);
                  }
                },
                enumerable: true,
                configurable: true
              });
              Object.defineProperty(System.prototype, "engines", {
                get: function get() {
                  return Object.freeze(this._engines.slice(0));
                },
                enumerable: true,
                configurable: true
              });
              System.prototype.onAttach = function (engine) {
                var index = this._engines.indexOf(engine);
                if (index === -1) {
                  this._engines.push(engine);
                }
              };
              System.prototype.onDetach = function (engine) {
                var index = this._engines.indexOf(engine);
                if (index !== -1) {
                  this._engines.splice(index, 1);
                }
              };
              return System;
            }();
            exports.System = System;

            // #endregion ORIGINAL CODE

            module.exports;
            module.exports.__esModule;
            module.exports.System;
          }, {});
        }
      };
    });

} }; });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,